class Solution:
    def ladderLength(self, beginWord: str, endWord: str, wordList: List[str]) -> int:
        
        if endWord not in wordList:
            return 0
        
        # create a pattern-word dictionary
        pattern = defaultdict(list)
        for word in wordList:
            for i in range(len(word)):
                new_word = word[:i] + "*" + word[i+1:]
                pattern[new_word].append(word)
        
        queue = [beginWord]
        visited = [beginWord]
        min_dist = {}
        min_dist[beginWord] = 0
        
        while queue:
            word = queue.pop(0)
            next_word_patterns = []
            
            if word == endWord:
                return min_dist[word] + 1
            
            for i in range(len(word)):
                new_word = word[:i] + "*" + word[i+1:]
                next_word_patterns.append(new_word) 
            
            for next_word_pattern in next_word_patterns:
                next_possible_words = pattern[next_word_pattern]
                for w in next_possible_words:
                    if w not in visited:
                        queue.append(w)
                        min_dist[w] = min_dist[word] + 1
                        # print(w)
                        visited.append(w)
                        
            
        return 0
                        
        
